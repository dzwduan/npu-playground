//-------------------------------------------------------------------------
// ChecksumRTL_noparam.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component PipeQueue1EntryRTL Definition
// At /home/dzw/miniconda3/envs/NPU/lib/python3.9/site-packages/pymtl3/stdlib/queues/queues.py

module PipeQueue1EntryRTL__EntryType_Bits128
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [127:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [127:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  logic [127:0] entry;
  logic [0:0] full;

  // PyMTL Lambda Block Source
  // At /home/dzw/miniconda3/envs/NPU/lib/python3.9/site-packages/pymtl3/stdlib/queues/queues.py:490
  // s.deq.rdy //= lambda: s.full & ~s.reset
  
  always_comb begin : _lambda__s_in_q_q_deq_rdy
    deq__rdy = full & ( ~reset );
  end

  // PyMTL Lambda Block Source
  // At /home/dzw/miniconda3/envs/NPU/lib/python3.9/site-packages/pymtl3/stdlib/queues/queues.py:489
  // s.enq.rdy //= lambda: ~s.reset & ( ~s.full | s.deq.en )
  
  always_comb begin : _lambda__s_in_q_q_enq_rdy
    enq__rdy = ( ~reset ) & ( ( ~full ) | deq__en );
  end

  // PyMTL Update Block Source
  // At /home/dzw/miniconda3/envs/NPU/lib/python3.9/site-packages/pymtl3/stdlib/queues/queues.py:492
  // @update_ff
  // def ff_pipe1():
  //   s.full <<= ~s.reset & ( s.enq.en | s.full & ~s.deq.en )
  // 
  //   if s.enq.en:
  //     s.entry <<= s.enq.msg
  
  always_ff @(posedge clk) begin : ff_pipe1
    full <= ( ~reset ) & ( enq__en | ( full & ( ~deq__en ) ) );
    if ( enq__en ) begin
      entry <= enq__msg;
    end
  end

  assign count = full;
  assign deq__ret = entry;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/dzw/miniconda3/envs/NPU/lib/python3.9/site-packages/pymtl3/stdlib/queues/queues.py

module PipeQueueRTL__EntryType_Bits128__num_entries_1
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [127:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [127:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component q
  //-------------------------------------------------------------

  logic [0:0] q__clk;
  logic [0:0] q__count;
  logic [0:0] q__reset;
  logic [0:0] q__deq__en;
  logic [0:0] q__deq__rdy;
  logic [127:0] q__deq__ret;
  logic [0:0] q__enq__en;
  logic [127:0] q__enq__msg;
  logic [0:0] q__enq__rdy;

  PipeQueue1EntryRTL__EntryType_Bits128 q
  (
    .clk( q__clk ),
    .count( q__count ),
    .reset( q__reset ),
    .deq__en( q__deq__en ),
    .deq__rdy( q__deq__rdy ),
    .deq__ret( q__deq__ret ),
    .enq__en( q__enq__en ),
    .enq__msg( q__enq__msg ),
    .enq__rdy( q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component q
  //-------------------------------------------------------------

  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = enq__en;
  assign q__enq__msg = enq__msg;
  assign enq__rdy = q__enq__rdy;
  assign q__deq__en = deq__en;
  assign deq__rdy = q__deq__rdy;
  assign deq__ret = q__deq__ret;
  assign count = q__count;

endmodule


// PyMTL Component StepUnit Definition
// At /home/dzw/npu-playground/fifo/pymtl.py

module StepUnit_noparam
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input  logic [31:0] sum1_in ,
  output logic [31:0] sum1_out ,
  input  logic [31:0] sum2_in ,
  output logic [31:0] sum2_out ,
  input  logic [15:0] word_in 
);
  logic [31:0] __tmpvar__up_step_temp1;
  logic [31:0] __tmpvar__up_step_temp2;

  // PyMTL Update Block Source
  // At /home/dzw/npu-playground/fifo/pymtl.py:28
  // @update
  // def up_step():
  //   temp1 = zext(s.word_in, 32) + s.sum1_in
  //   s.sum1_out @= temp1 & 0xffff
  // 
  //   temp2 = s.sum1_out + s.sum2_in
  //   s.sum2_out @= temp2 & 0xffff
  
  always_comb begin : up_step
    __tmpvar__up_step_temp1 = { { 16 { 1'b0 } }, word_in } + sum1_in;
    sum1_out = __tmpvar__up_step_temp1 & 32'd65535;
    __tmpvar__up_step_temp2 = sum1_out + sum2_in;
    sum2_out = __tmpvar__up_step_temp2 & 32'd65535;
  end

endmodule


// PyMTL Component ChecksumRTL Definition
// At /home/dzw/npu-playground/fifo/pymtl.py

module ChecksumRTL_noparam
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] recv__en  ,
  input logic [127:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  output logic [0:0] send__en  ,
  output logic [31:0] send__msg  ,
  input logic [0:0] send__rdy  
);
  logic [31:0] sum1;
  logic [31:0] sum2;
  logic [15:0] words [0:7];
  //-------------------------------------------------------------
  // Component in_q
  //-------------------------------------------------------------

  logic [0:0] in_q__clk;
  logic [0:0] in_q__count;
  logic [0:0] in_q__reset;
  logic [0:0] in_q__deq__en;
  logic [0:0] in_q__deq__rdy;
  logic [127:0] in_q__deq__ret;
  logic [0:0] in_q__enq__en;
  logic [127:0] in_q__enq__msg;
  logic [0:0] in_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits128__num_entries_1 in_q
  (
    .clk( in_q__clk ),
    .count( in_q__count ),
    .reset( in_q__reset ),
    .deq__en( in_q__deq__en ),
    .deq__rdy( in_q__deq__rdy ),
    .deq__ret( in_q__deq__ret ),
    .enq__en( in_q__enq__en ),
    .enq__msg( in_q__enq__msg ),
    .enq__rdy( in_q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component in_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component steps[0:7]
  //-------------------------------------------------------------

  logic [0:0] steps__clk [0:7];
  logic [0:0] steps__reset [0:7];
  logic [31:0] steps__sum1_in [0:7];
  logic [31:0] steps__sum1_out [0:7];
  logic [31:0] steps__sum2_in [0:7];
  logic [31:0] steps__sum2_out [0:7];
  logic [15:0] steps__word_in [0:7];

  StepUnit_noparam steps__0
  (
    .clk( steps__clk[0] ),
    .reset( steps__reset[0] ),
    .sum1_in( steps__sum1_in[0] ),
    .sum1_out( steps__sum1_out[0] ),
    .sum2_in( steps__sum2_in[0] ),
    .sum2_out( steps__sum2_out[0] ),
    .word_in( steps__word_in[0] )
  );

  StepUnit_noparam steps__1
  (
    .clk( steps__clk[1] ),
    .reset( steps__reset[1] ),
    .sum1_in( steps__sum1_in[1] ),
    .sum1_out( steps__sum1_out[1] ),
    .sum2_in( steps__sum2_in[1] ),
    .sum2_out( steps__sum2_out[1] ),
    .word_in( steps__word_in[1] )
  );

  StepUnit_noparam steps__2
  (
    .clk( steps__clk[2] ),
    .reset( steps__reset[2] ),
    .sum1_in( steps__sum1_in[2] ),
    .sum1_out( steps__sum1_out[2] ),
    .sum2_in( steps__sum2_in[2] ),
    .sum2_out( steps__sum2_out[2] ),
    .word_in( steps__word_in[2] )
  );

  StepUnit_noparam steps__3
  (
    .clk( steps__clk[3] ),
    .reset( steps__reset[3] ),
    .sum1_in( steps__sum1_in[3] ),
    .sum1_out( steps__sum1_out[3] ),
    .sum2_in( steps__sum2_in[3] ),
    .sum2_out( steps__sum2_out[3] ),
    .word_in( steps__word_in[3] )
  );

  StepUnit_noparam steps__4
  (
    .clk( steps__clk[4] ),
    .reset( steps__reset[4] ),
    .sum1_in( steps__sum1_in[4] ),
    .sum1_out( steps__sum1_out[4] ),
    .sum2_in( steps__sum2_in[4] ),
    .sum2_out( steps__sum2_out[4] ),
    .word_in( steps__word_in[4] )
  );

  StepUnit_noparam steps__5
  (
    .clk( steps__clk[5] ),
    .reset( steps__reset[5] ),
    .sum1_in( steps__sum1_in[5] ),
    .sum1_out( steps__sum1_out[5] ),
    .sum2_in( steps__sum2_in[5] ),
    .sum2_out( steps__sum2_out[5] ),
    .word_in( steps__word_in[5] )
  );

  StepUnit_noparam steps__6
  (
    .clk( steps__clk[6] ),
    .reset( steps__reset[6] ),
    .sum1_in( steps__sum1_in[6] ),
    .sum1_out( steps__sum1_out[6] ),
    .sum2_in( steps__sum2_in[6] ),
    .sum2_out( steps__sum2_out[6] ),
    .word_in( steps__word_in[6] )
  );

  StepUnit_noparam steps__7
  (
    .clk( steps__clk[7] ),
    .reset( steps__reset[7] ),
    .sum1_in( steps__sum1_in[7] ),
    .sum1_out( steps__sum1_out[7] ),
    .sum2_in( steps__sum2_in[7] ),
    .sum2_out( steps__sum2_out[7] ),
    .word_in( steps__word_in[7] )
  );

  //-------------------------------------------------------------
  // End of component steps[0:7]
  //-------------------------------------------------------------
  logic [0:0] __tmpvar__up_rtl_send_go;

  // PyMTL Update Block Source
  // At /home/dzw/npu-playground/fifo/pymtl.py:83
  // @update
  // def up_rtl_send():
  //   go = s.in_q.deq.rdy & s.send.rdy
  //   s.send.en     @= go
  //   s.in_q.deq.en @= go
  
  always_comb begin : up_rtl_send
    __tmpvar__up_rtl_send_go = in_q__deq__rdy & send__rdy;
    send__en = __tmpvar__up_rtl_send_go;
    in_q__deq__en = __tmpvar__up_rtl_send_go;
  end

  // PyMTL Update Block Source
  // At /home/dzw/npu-playground/fifo/pymtl.py:89
  // @update
  // def up_rtl_sum():
  //   s.send.msg @= ( s.sum2 << 16 ) | s.sum1
  
  always_comb begin : up_rtl_sum
    send__msg = ( sum2 << 5'd16 ) | sum1;
  end

  assign in_q__clk = clk;
  assign in_q__reset = reset;
  assign steps__clk[0] = clk;
  assign steps__reset[0] = reset;
  assign steps__clk[1] = clk;
  assign steps__reset[1] = reset;
  assign steps__clk[2] = clk;
  assign steps__reset[2] = reset;
  assign steps__clk[3] = clk;
  assign steps__reset[3] = reset;
  assign steps__clk[4] = clk;
  assign steps__reset[4] = reset;
  assign steps__clk[5] = clk;
  assign steps__reset[5] = reset;
  assign steps__clk[6] = clk;
  assign steps__reset[6] = reset;
  assign steps__clk[7] = clk;
  assign steps__reset[7] = reset;
  assign in_q__enq__en = recv__en;
  assign in_q__enq__msg = recv__msg;
  assign recv__rdy = in_q__enq__rdy;
  assign words[0] = in_q__deq__ret[15:0];
  assign words[1] = in_q__deq__ret[31:16];
  assign words[2] = in_q__deq__ret[47:32];
  assign words[3] = in_q__deq__ret[63:48];
  assign words[4] = in_q__deq__ret[79:64];
  assign words[5] = in_q__deq__ret[95:80];
  assign words[6] = in_q__deq__ret[111:96];
  assign words[7] = in_q__deq__ret[127:112];
  assign steps__word_in[0] = words[0];
  assign steps__sum1_in[0] = 32'd0;
  assign steps__sum2_in[0] = 32'd0;
  assign steps__word_in[1] = words[1];
  assign steps__sum1_in[1] = steps__sum1_out[0];
  assign steps__sum2_in[1] = steps__sum2_out[0];
  assign steps__word_in[2] = words[2];
  assign steps__sum1_in[2] = steps__sum1_out[1];
  assign steps__sum2_in[2] = steps__sum2_out[1];
  assign steps__word_in[3] = words[3];
  assign steps__sum1_in[3] = steps__sum1_out[2];
  assign steps__sum2_in[3] = steps__sum2_out[2];
  assign steps__word_in[4] = words[4];
  assign steps__sum1_in[4] = steps__sum1_out[3];
  assign steps__sum2_in[4] = steps__sum2_out[3];
  assign steps__word_in[5] = words[5];
  assign steps__sum1_in[5] = steps__sum1_out[4];
  assign steps__sum2_in[5] = steps__sum2_out[4];
  assign steps__word_in[6] = words[6];
  assign steps__sum1_in[6] = steps__sum1_out[5];
  assign steps__sum2_in[6] = steps__sum2_out[5];
  assign steps__word_in[7] = words[7];
  assign steps__sum1_in[7] = steps__sum1_out[6];
  assign steps__sum2_in[7] = steps__sum2_out[6];
  assign sum1 = steps__sum1_out[7];
  assign sum2 = steps__sum2_out[7];

endmodule
